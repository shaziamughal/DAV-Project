import networkx as nx
import matplotlib.pyplot as plt

# Example dataset
data = [
    {"source": "group", "target": "security", "relation": "provide"},
    {"source": "waves", "target": "crafted", "relation": "this beaut"},
    {"source": "side", "target": "plate", "relation": "A plate of that"},
    {"source": "hospitals", "target": "map", "relation": "map from they"},
    {"source": "coach", "target": "players", "relation": "given"},
    {"source": "england", "target": "ahead", "relation": "meet"},
    {"source": "female", "target": "dark", "relation": "pushing"},
    {"source": "tourists", "target": "snowy", "relation": "descend"},
    {"source": "soldiers", "target": "district", "relation": "team"}
]

# Create a directed graph
graph = nx.DiGraph()

# Add nodes and edges
for row in data:
    graph.add_node(row["source"], color='skyblue')  # Source node with color
    graph.add_node(row["target"], color='lightgreen')  # Target node with different color
    graph.add_edge(row["source"], row["target"], label=row["relation"])  # Add edge with relation label

# Extract node colors for visualization
node_colors = [graph.nodes[node].get('color', 'skyblue') for node in graph.nodes]

# Draw the graph with enhancements
plt.figure(figsize=(24, 10))  # Increased size for clarity
pos = nx.spring_layout(graph, seed=42)  # Position nodes dynamically

# Draw nodes and edges with specific styles
nx.draw(graph, pos, with_labels=True, node_color=node_colors, node_size=3000,
        font_size=10, font_weight="bold", edge_color="gray", arrowsize=20)
edge_labels = nx.get_edge_attributes(graph, "label")

# Draw edge labels with better positioning
nx.draw_networkx_edge_labels(graph, pos, edge_labels=edge_labels, font_size=9,
                             font_color="darkred", label_pos=0.5)

# Add a title and improve readability
plt.title("Enhanced Entity-Relation Graph", fontsize=16, fontweight='bold')
plt.show()
